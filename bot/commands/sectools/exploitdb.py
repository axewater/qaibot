import discord
import logging
from ...utilities import send_large_message
from ...integrations.security_exploitdb import search_exploit_json
import json

async def handle_exploitdb(interaction: discord.Interaction, query: str = None, platform: str = None, cve: str = None, nb_results: int = 5):
    await interaction.response.defer()
    progress_message = await interaction.followup.send(f"QAI is searching Exploit Database for: '{query}' with platform '{platform}', CVE '{cve}', and number of results '{nb_results}'...")

    logging.info(f"handle_exploitdb: Starting to search Exploit Database for '{query}' with platform '{platform}', CVE '{cve}', and number of results '{nb_results}'")
    try:
        results = search_exploit_json(query=query, platform=platform, cve=cve, nb_results=nb_results)
        await progress_message.edit(content=f"QAI is compiling and formatting results for you ...")

        # Parse the JSON results
        results_list = json.loads(results)
        
        # Construct a table-like string with markdown and emoticons
        table_header = f"**{'ID':<10}{'Description':<50}{'Type':<10}{'Platform':<15}{'Date Published':<15}{'Verified':<10}{'Port':<5}{'Author':<20}{'Link'}**\n"
        table_header += "-" * 150 + "\n"
        
        table_rows = ""
        for exploit in results_list:
            verified_status = "✅" if exploit['verified'] else "❌"
            table_rows += f"{exploit['id']:<10}{exploit['description']:<50}{exploit['type']:<10}{exploit['platform']:<15}{exploit['date_published']:<15}{verified_status:<10}{exploit['port']:<5}{exploit['author']:<20}{exploit['link']}\n"
        
        formatted_results = table_header + table_rows

        # Send the formatted results using send_large_message
        await send_large_message(interaction, formatted_results, previewurls='no')
    except Exception as e:
        logging.error(f"handle_exploitdb: An error occurred - {str(e)}")
        await interaction.followup.send("An error occurred while processing your request.")
