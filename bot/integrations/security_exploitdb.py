import argparse
import json
import pyxploitdb
import logging
import html

def search_exploit(query, platform=None, cve=None, nb_results=1):
    if cve:
        results = pyxploitdb.searchCVE(cve, _print=False, nb_results=nb_results)
    else:
        results = pyxploitdb.searchEDB(query, platform=platform, _print=False, nb_results=nb_results)
    
    return results

def exploit_to_dict(exploit):
    return {
        'id': exploit.id,
        'description': html.unescape(exploit.description),
        'type': exploit.type,
        'platform': exploit.platform,
        'date_published': exploit.date_published,
        'verified': exploit.verified,
        'port': exploit.port,
        'tag_if_any': exploit.tag_if_any,
        'author': exploit.author,
        'link': exploit.link
    }

def search_exploit_json(query=None, platform=None, cve=None, nb_results=1):
    # If CVE is provided, ignore the query
    if cve:
        query = None

    results = search_exploit(query, platform=platform, cve=cve, nb_results=nb_results)
    logging.info(f"search_exploit_json: results {results}")
    
    results_dict = [exploit_to_dict(exploit) for exploit in results]
    
    json_results = json.dumps(results_dict, indent=2)
    return json_results

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Search Exploit Database using pyxploitdb')
    parser.add_argument('query', type=str, nargs='?', help='Search query string')
    parser.add_argument('--platform', type=str, help='Specific platform to search exploits for', required=False)
    parser.add_argument('--cve', type=str, help='CVE identifier to search exploits for', required=False)
    parser.add_argument('--nb_results', type=int, help='Number of results to return (default: 5)', default=5)

    args = parser.parse_args()

    if not args.query and not args.cve:
        parser.error("You must provide either a search query or a CVE identifier.")

    results = search_exploit_json(query=args.query, platform=args.platform, cve=args.cve, nb_results=args.nb_results)
    print(results)
